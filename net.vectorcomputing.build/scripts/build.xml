<?xml version="1.0" encoding="UTF-8"?>
<project default="local" name="build">

	<description>Lance's Eclipse Tools Update Site Build</description>

	<!--
	Dependencies :
	This project makes extensive use of ant-contrib to create a more elegant 
	program through use of runtarget to get property inheritance going back 
	to the top-level target and if tasks.
	-->

	<import file="customTargets.xml"/>
	<import file="git-tasks.xml"/>

	<taskdef resource="net/sf/antcontrib/antcontrib.properties"/>

	<!--
	The main build targets are:
	  1. ci = continuous integration build, uses a timestamp accurate to the minute
	  2. nightly = nightly build, uses a timestamp accurate to the day
	  3. release = a release build, uses a version number
	  4. personal = a personal build
	  5. local = run a build intended for the local machine, builds results are placed in the current user's home directory with the project name
	-->
	<target name="ci" description="Perform a continuous integration (CI) build">
		<property name="buildtype" value="ci"/>
		<antcall target="build"/>
	</target>
	<target name="nightly" description="Perform a nightly build">
		<property name="buildtype" value="nightly"/>
		<antcall target="build"/>
	</target>
	<target name="release" description="Performs a release build">
		<property name="buildtype" value="release"/>
		<antcall target="build"/>
	</target>
	<target name="personal" description="Performs a personal build">
		<property name="buildtype" value="personal"/>
		<antcall target="build"/>
	</target>
	<target name="local" description="Performs a local build">
		<property name="buildtype" value="local"/>
		<antcall target="build"/>
	</target>

	<!--
	Build phases:
	  1. setup
	  2. fetch
	  2. import
	  3. compile
	  4. publish
	  5. categorize
	  6. package
	  7. cleanup
	-->
	<target name="build">
		<trycatch property="failprop" reference="failref">
			<try>
				<runtarget target="setup"/>
				<runtarget target="printSetupVars"/>
				<runtarget target="fetch"/>
				<runtarget target="import"/>
				<runtarget target="compile"/>
				<runtarget target="publish"/>
				<runtarget target="categorize"/>
				<runtarget target="package"/>
			</try>
			<finally>
				<runtarget target="cleanup"/>
			</finally>
		</trycatch>
	</target>

	<target name="setup">
		<antcall target="preSetup"/>
		<property file="${basedir}${file.separator}build.properties"/>
		<property name="build.info" value="${basedir}${file.separator}build.properties"/>
		<property name="export.info" value="${basedir}${file.separator}export.properties"/>
		<property name="build.file" location="${basedir}${file.separator}exportUpdateSite.xml"/>

		<runtarget target="eclipse.setup"/>
			
		<fileset id="equinox.launcher" dir="${eclipse.plugins}">
			<include name="org.eclipse.equinox.launcher_*.jar"/>
		</fileset>
		<pathconvert property="equinox.launcher.path" refid="equinox.launcher"/>

		<if description="Determine which setup to run based on the build type">
			<or>
				<equals arg1="${buildtype}" arg2="ci" casesensitive="false" />
				<equals arg1="${buildtype}" arg2="nightly" />
				<equals arg1="${buildtype}" arg2="release" />
				<equals arg1="${buildtype}" arg2="local" />
				<equals arg1="${buildtype}" arg2="personal" />
			</or>
			<then>
				<runtarget target="${buildtype}.setup" />
			</then>
			<else>
				<fail message="Unable to find setup for build type ${buildtype}"/>
			</else>
		</if>

		<antcall target="postSetup"/>
	</target>
	
	<target name="eclipse.setup">
		<echo message="eclipse.home=${eclipse.home}"/>
		<!-- make ECLIPSE_DIR have if blocks for architcture -->
		<!-- ${os.name} ${os.version} ${os.arch} -->
		<!--property name="ECLIPSE_DIR" location="${basedir}/com.ibm.ies.full.linux-gtk-x86/eclipse"/-->
		<property name="eclipse.plugins" location="${eclipse.home}${file.separator}plugins"/>
		<echo message="eclipse.plugins=${eclipse.plugins}" />
	</target>

	<target name="ci.setup" description="Configures properties for a continuous integration (ci) build">
		<tstamp>
			<format property="qualifier" pattern="${ci.tstamp.pattern}" />
		</tstamp>
		<property name="update.dir" value="${ci.update.dir}" />
		<property name="export.destination" value="${update.dir}${file.separator}${qualifier}" />
		<property name="builds.dir" value="${ci.builds.dir}" />
		<property name="builds.filename" value="${project.name}_UpdateSite_${qualifier}.zip" />
		<property name="builds.filepath" value="${builds.dir}${file.separator}${builds.filename}" />
		<property name="builds.url" value="${ci.builds.url}/${builds.filename}"/>
		<property name="update.url" value="${ci.update.url}/${qualifier}" />
		<runtarget target="createExportInfo" />
	</target>

	<target name="createExportInfo">
		<propertyfile file="${export.info}" comment="Export Information File">
			<entry key="eclipse.workspace" value="${eclipse.workspace}" />
			<entry key="export.filename" value="${builds.filename}" />
			<entry key="export.destination" value="${export.destination}" />
			<entry key="export.qualifier" value="${qualifier}" />
		</propertyfile>
	</target>

	<target name="nightly.setup" description="Configures properties for a nightly build">
		<tstamp>
			<format property="qualifier" pattern="${nightly.tstamp.pattern}" />
		</tstamp>
		<property name="update.dir" value="${nightly.update.dir}" />
		<property name="export.destination" value="${update.dir}${file.separator}${qualifier}" />
		<property name="builds.dir" value="${nightly.builds.dir}" />
		<property name="builds.filename" value="${project.name}_UpdateSite_${qualifier}.zip" />
		<property name="builds.filepath" value="${builds.dir}${file.separator}${builds.filename}" />
		<property name="builds.url" value="${nightly.builds.url}/${builds.filename}"/>
		<property name="update.url" value="${nightly.update.url}/${qualifier}" />
		<runtarget target="createExportInfo" />
	</target>

	<target name="release.setup" description="Configures properties for a release build">
		<property name="qualifier" value="${version}" />
		<property name="update.dir" value="${release.update.dir}" />
		<property name="export.destination" value="${update.dir}${file.separator}${qualifier}" />
		<property name="builds.dir" value="${release.builds.dir}" />
		<property name="builds.filename" value="${project.name}_UpdateSite_${qualifier}.zip" />
		<property name="builds.filepath" value="${builds.dir}${file.separator}${builds.filename}" />
		<property name="builds.url" value="${release.builds.url}/${builds.filename}"/>
		<property name="update.url" value="${release.update.url}/${qualifier}" />
		<runtarget target="createExportInfo" />
	</target>

	<target name="updateBuildInfo">
		<propertyfile file="${build.info}" comment="Build Information File - DO NOT CHANGE">
			<entry key="build.num"
				type="int" default="0000"
				operation="+" pattern="0000"/>
			<entry key="build.date"
				type="date"
				value="now"
				pattern="dd.MM.yyyy HH:mm"/>
		</propertyfile>
	</target>
	
	<target name="local.setup" description="Configures properties for a local build">
		<tstamp>
			<format property="qualifier" pattern="${nightly.tstamp.pattern}" />
		</tstamp>
		<property name="update.dir" value="${user.home}${file.separator}${project.name}${file.separator}update" />
		<property name="export.destination" value="${update.dir}${file.separator}${qualifier}" />
		<property name="builds.dir" value="${user.home}${file.separator}${project.name}${file.separator}builds" />
		<property name="builds.filename" value="${project.name}_UpdateSite_${qualifier}.zip" />
		<property name="builds.filepath" value="${builds.dir}${file.separator}${builds.filename}" />
		<property name="builds.url" value="${nightly.builds.url}/${builds.filename}"/>
		<property name="update.url" value="${nightly.update.url}/${qualifier}" />
		<runtarget target="createExportInfo" />
	</target>

	<target name="personal.setup" description="Configures properties for a personal	 build">
		<tstamp>
			<format property="qualifier" pattern="${nightly.tstamp.pattern}" />
		</tstamp>
		<property name="update.dir" value="${user.home}${file.separator}${project.name}" />
		<property name="export.destination" value="${nightly.update.dir}${file.separator}${qualifier}" />
		<property name="builds.dir" value="${user.home}${file.separator}${project.name}" />
		<property name="builds.filename" value="${project.name}_UpdateSite_${qualifier}.zip" />
		<property name="builds.filepath" value="${builds.dir}${file.separator}${builds.filename}" />
		<property name="builds.url" value="${nightly.builds.url}/${builds.filename}"/>
		<property name="update.url" value="${nightly.update.url}/${qualifier}" />
		<runtarget target="createExportInfo" />
	</target>

	<target name="printSetupVars">
		<echo message="update.dir=${update.dir}"/>
		<echo message="builds.dir=${builds.dir}"/>
		<echo message="export.destination=${export.destination}"/>
		<echo message="builds.filename=${builds.filename}"/>
		<echo message="builds.filepath=${builds.filepath}"/>
		<echo message="builds.url=${builds.url}"/>
		<echo message="update.url=${update.url}"/>
	</target>

	<target name="fetch">
		<antcall target="preFetch"/>
		<git-clone-pull repository="/Users/lfeagan/git/LET" dest="${eclipse.workspace}"/>
		<antcall target="postFetch"/>
	</target>

	<target name="import" description="Imports projects into the build workspace">
		<antcall target="preImport"/>
		<java jar="${equinox.launcher.path}" fork="true" failonerror="true">
			<arg line="-application net.vectorcomputing.build.importProjects"/>
			<arg line="-data ${eclipse.workspace}"/>
		</java>
		<antcall target="postImport"/>
	</target>

	<target name="compile" description="Perform the Eclipse build">
		<antcall target="preCompile"/>
		<java jar="${equinox.launcher.path}" fork="true" failonerror="true">
			<arg line="-application org.eclipse.ant.core.antRunner"/>
			<arg line="-noSplash"/>
			<arg line="-buildfile ${build.file}"/>
			<arg line="-data ${eclipse.workspace}"/>
			<arg line="-DpluginPath=${eclipse.plugins}"/>
			<arg line="-Dbuilder=${basedir}" />
			<arg line="-DjavacFailOnError=true"/>
			<arg line="-DjavacVerbose=true"/>
			<arg line="-DjavacSource=1.6"/>
			<arg line="-DjavacTarget=1.6"/>
		</java>
		<antcall target="postCompile"/>
	</target>

	<target name="publish" description="Create an update site suitable for installation using Eclipse's Update Site Manager">
		<antcall target="prePublish"/>
		<java jar="${equinox.launcher.path}" fork="true" failonerror="true" maxmemory="384M">
			<arg line="-application org.eclipse.equinox.p2.publisher.FeaturesAndBundlesPublisher"/>
			<arg line="-noSplash" />
			<arg line="-data ${eclipse.workspace}" />
			<arg line="-metadataRepository file://${export.destination}" />
			<arg line="-artifactRepository file://${export.destination}" />
			<arg line="-bundles ${export.destination}" />
			<arg line="-features ${export.destination}" />
			<arg line="-compress" />
		</java>
		<!-- FeaturesAndBundlesPublisher arguments
		     -bundles = the location of the plugins to generate metadata for
		     -features = the location of the features to generate metadata for
		     -metadataRepository = the location to publish the generated metadata to
		     -artifactRepository = the location to publish the artifacts to if -publishArtifacts is set
		     -publishArtifacts = copy the bundles and/or features to the artifact repository
		     -compress = store the content.xml and artifacts.xml files inside jars
		     -source = the location of the update site
		-->
		<symlink link="${update.dir}${file.separator}latest" resource="${export.destination}" overwrite="true" />
		<antcall target="postPublish"/>
	</target>

	<target name="categorize" description="Categorizes the update site">
		<java jar="${equinox.launcher.path}" fork="true" failonerror="true" maxmemory="384M">
			<arg line="-application org.eclipse.equinox.p2.publisher.CategoryPublisher"/>
			<arg line="-noSplash"/>
			<arg line="-data ${eclipse.workspace}"/>
			<arg line="-metadataRepository file://${export.destination}"/>
			<arg line="-categoryDefinition file://${basedir}/category.xml" />
		</java>
	</target>

	<target name="package" description="">
		<zip basedir="${export.destination}" destfile="${builds.filepath}" compress="true" />
	</target>

	<target name="cleanup" description="cleanup any temporary files created during the build process">
		<deltree dir="${eclipse.workspace}"/>
	</target>

</project>
